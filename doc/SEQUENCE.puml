@startuml
title AS-IS_cfm_v1.0.0.qr2
box "ADC/LSM"
participant cfm
end box

box "VOD"
participant cfw as "cfw"
end box

group file-remover-thread
loop endless
autonumber 1 "<b>[0]"
cfm->cfm: file meta 정보 생성
    note right
        - .hitcount.history 에서 file size 추출
        - .grade.info 에서 file 순위 추출
        - lb log에서 hit수 급상승 file 추출
    end note
cfm->cfw: 여러 vod 서버에 있는 file 삭제 처리
    note right
        - .hitcount.history 에서 vod 서버 위치 추출
        - 여러 서버에 있는 file 삭제 요청
    end note
cfm->cfw: VOD disk 용량이 모자른 경우 file 삭제 처리
    note right
        - hit수 급상승 file은 삭제 요청에서 제외
        - disk 용량이 확보될 때까지 file 순위가 낮은 파일 삭제 요청
    end note
end
end

group task-manager-thread
loop endless
autonumber 1 "<b>[0]"
cfm->cfm: file meta 정보 생성
    note right
        - .hitcount.history 에서 file size 추출
        - .grade.info 에서 file 순위 추출
        - lb log에서 hit 수 급상승 file 추출
    end note
cfm->cfm: create tasks
    note right
        배포 task 생성
        - hit수 급상승 file 의 hit수 높은 순서로,
        - file 순위가 높은 순서로 생성
        - 모든 src 가 선택될 때까지 생성
    end note
end
end
@enduml

@startuml
title TO-BE_cfm_v1.0.0.qr3
box "ADC/LSM"
participant cfm

end box

box "VOD"
participant cfw as "cfw"
end box

group file-watcher-thread
loop endless
autonumber 1 "<b>[0]"
cfm->cfm: file meta 정보 감시
    note right
        - .hitcount.history file 감시
        - .grade.info file 감시
    end note
end
end

group remover-tasker-runner-thread
loop endless
autonumber 1 "<b>[0]"
cfm->cfm: file meta 정보 생성
    note right
        - .hitcount.history 에서 file size 추출
        - .grade.info 에서 file 순위 추출
        - lb log에서 hit 수 급상승 file 추출
    end note

  group remover-run
  cfm->cfw: 여러 vod 서버에 있는 file 삭제 처리
      note right
          - .hitcount.history 에서 vod 서버 위치 추출
          - 여러 서버에 있는 file 삭제 요청
      end note
  cfm->cfw: VOD disk 용량이 모자른 경우 file 삭제 처리
      note right
          - hit수 급상승 file은 삭제 요청에서 제외
          - disk 용량이 확보될 때까지 file 순위가 낮은 파일 삭제 요청
      end note
  end
  group takser-run
  cfm->cfm: create tasks
      note right
          배포 task 생성
          - hit수 급상승 file 의 hit수 높은 순서로,
          - file 순위가 높은 순서로 생성
          - 모든 src 가 선택될 때까지 생성
      end note
  end
end
end
@enduml

@startuml
title cfm_cfw_DFS_Sequence_v1.0.0.qr3

box "ADC/LSM"
participant cfm

end box

box "VOD"
participant cfw as "cfw"
end box

box "VOD(source)"
participant cfw2 as "cfw"
participant dfs as "DFS"
end box


group heartbeat-thread
loop endless
autonumber 1 "<b>[0]"
cfm->cfw: heartbeat 확인
    note right
      서버별 heartbeat 성공 여부 정보 생성
    end note
cfm->cfw2: heartbeat 확인
end
end

group file-watcher-thread
loop endless
autonumber 1 "<b>[0]"
cfm->cfm: file meta 정보 감시
    note right
        - .hitcount.history file 감시
        - .grade.info file 감시
    end note
end
end

group remover-tasker-runner-thread
loop endless
autonumber 1 "<b>[0]"
cfm->cfm: file meta 정보 생성
    note right
        - .hitcount.history 에서 file size 추출
        - .grade.info 에서 file 순위 추출
        - lb log에서 hit 수 급상승 file 추출
    end note

  group remover-run
  cfm->cfw: GET /files
      note right
          서버별 file list 확인
      end note
  cfm->cfw2: GET /files
  cfm->cfm: file meta 에서 여러 서버에 존재하는(배포된) file list 추출
  cfm->cfw: DELETE /files/c.mpg
      note right
          여러 서버에 존재하는 file 삭제
      end note

  cfm->cfw: GET /df
      note right
          디스크 사용량 체크
      end note
  cfm->cfw2: GET /df
  cfm->cfw: DELETE /files/a.mpg
      note right
          디스크 사용량이 정해진 한계 사용량을 넘었을 때
          hit수 급상승 file은 제외
          file 순위가 낮은 순으로 file 삭제
      end note
  cfm->cfw2: DELETE /files/b.mpg
  end

  group tasker-run
  cfm->cfm: check task queue
      note right
          배포 schedule 조회
      end note
  cfm->cfm: clean task queue
      note right
          schedule 삭제
          - 완료되었거나 (status = done)
          - timeout ( mtime + 30분 =< current time )
          - heartbeat 성공 하지 않았거나
      end note
  cfm->cfw: GET /files
      note right
          서버별 file list 확인
      end note
  cfm->cfw2: GET /files
  cfm->cfm: create tasks
      note right
          배포 schedule 생성
          - hit수 급상승 file부터
          - 순위가 높은 순서부터 조건 확인
          - task queue 에 없고
          - VOD 서버에 없고
          - SAN 에 존재하는 파일인 경우 선택
          - 모든 src 가 선택될 때까지 생성
      end note
  end
end
end

group cfw
loop endless
autonumber 1 "<b>[0]"
cfw->cfw: 디스크 사용량 체크
cfw->cfm: GET /tasks
    note left
        디스크가 충분한 경우
        배포 schedule 조회
        자신의 배포 schedule 선택
    end note
cfw->cfm: PATCH /tasks/${task_id}
    note left
        file 다운로드 시작 전 schedule 상태 변경
        - status:ready -> status:working
    end note
cfw->dfs: file 다운로드 요청
cfw->cfm: PATCH /tasks/${task_id}
    note left
        file 다운로드 완료 후 schedule 상태 변경
        - status:working -> status:done
    end note
end
end
@enduml

@startuml
title cfm_v1.0.0.qr3_manager_state
hide empty description

M0 : 메인 모듈
M1 : watcher notify test
S0 : 무한 반복
S1 : watcher 실행
S2 : runner 실행
S3 : watcher의 error 응답 기다림
S4 : 파일 존재 검사
S5 : watcher, runner 중지
S7 : watcher, runner 중지

[*] -> M0
M0 --> M1
note right
  성공 : watcher notify 모드 setting
  실패 : watcher poll 모드 setting
end note
M1 --> S0 : manager 실행
S0 --> S1
S1 --> S2
S2 --> S3
S3 --> S4 : 감시하던 파일이 없어진 경우
S3 --> S4 : 감시하던 파일의 direcotry가\nunmount 된 경우
S3 --> S7 : watcher 모듈에서 error가 난 경우
note left
watcher poll 모드 setting해서
재시작
end note
S4 -> S4 : 없는 경우 계속 검사
S4 -> S5 : 파일이 다시 생긴 경우
S5 -> S0 : 재시작
S7 -> S0 : 재시작
@enduml

@startuml
title cfm_v1.0.0.qr3_watcher_state
hide empty description
W0 : 모드 검사
PollMode : poll 모드 실행
NotifyMode : notify 모드 실행

[*] -> W0
W0 -> PollMode : poll 모드인 경우
W0 -> NotifyMode : notify 모드인 경우
@enduml

@startuml
title cfm_v1.0.0.qr3_watcher_poll_state
hide empty description

state PollMode{
P1 : .hitcount.history 파일 존재 확인\n.grade.info 파일 존재 검사
P2 : 무한 반복
P3 : 두 파일에 변화가 있는지 검사
P4 : 두 파일에 변화가 특정시간동안 없었는지 검사
EventChannel :

[*] -> P1
P1 -[dashed]-> EventChannel : 두 파일이 모두 있으면\nevent 발생
P1 ---> P2
P2 --> P3
P3 -[dashed]-> EventChannel : 두 파일 중 하나라도\n변화가 있으면\nevent 발생
P3 -> P4
P4 -[dashed]-> EventChannel : 특정 시간동안\n변화가 없으면\ntimeout event 발생
P4 --> P2
}
@enduml

@startuml
title cfm_v1.0.0.qr3_watcher_notify_state
hide empty description

state NotifyMode{
N1 : .hitcount.history 파일 존재 확인\n.grade.info 파일 존재 검사
N2 : 파일 event 감시
N3 : 두 파일에 변화가 있는지 검사
N4 : directory 가 없어졌는지 검사
N5 : directory 가 unmount 되었는 지 검사
N6 : 두 파일에 변화가 특정시간동안 없었는지 검사
N7 : 에러가 있었는 지 검사

EventChannel :
ErrorChannel :

[*] --> N1
N1 -[dashed]> EventChannel : 두 파일이 모두 있으면\nevent 발생
N1 --> N2
N2 --> N3
N3 -[dashed]> EventChannel : 두 파일 중 하나라도 \n변화가 있으면 event 발생
N3 -> N4
N4 -[dashed]> EventChannel : directory가 없어진 경우\nevent 발생
N4 -> N5
N5 -[dashed]> EventChannel : directory가 unmount된 경우\nevent 발생
N5 -> N6
N6 -[dashed]-> EventChannel : 특정 시간동안 변화가 없으면\ntime event 발생
N6 -> N7
N7 -[dashed]> ErrorChannel : 에러가 발생한 경우\nevent 발생
N7 --> N2 : 에러가 없는 경우
N7 --> [*] : 에러가 발생한 경우
@enduml

@startuml
title cfm_v1.0.0.qr3_runner_state
hide empty description

EventChannel:
R0 : event 검사
R1 : timeout 검사
R2 : 파일 event 검사
R3 : event 발생 후\n특정시간이 흘렀는지 검사
R4 : 중지 요청이 있는 지 검사

R10 : grade info, hitcount history 파일로부터\n파일 등급, 크기, 서버 위치 정보가 들어있는 파일 meta 목록 생성\n여러 server에 존재하는 파일 meta 목록 생성
note left
	파일 등급 : grade info 파일에서 구함
	파일 크기 : hitcount history 파일에서 구함
	서버 위치 : 서버가 존재하는 서버 ip 목록,
                     hitcount history 파일에서 구함
	서버 위치 정보를 이용하여 여러 server에
  존재하는 파일 목록 생성
end note
R11 : 급hit 상승 파일 목록 구함
R12 : remover process 실행
R13 : tasker process 실행

[*] --> R0
EventChannel -[dashed]-> R0
R0 --> R1
R1 -> R2
R2 -> R3
R3 -> R4

R1 -> R10 : timout event\n발생한 경우
R10 -> R11
R11 -> R12
R12 -> R13
R13 -> R0

R2 --> R10 : event가 발생한 경우

R3 --> R11 : event 발생 후\n특정시간이 지난 경우

R4 -> [*] : 중지 요청 시
R4 --> R0 : 중지 요청이\n없는 경우

R12 ----> RemoverProcess
R13 ----> TaskerProcess

state TaskerProcess {
  T3 : source, dest 서버의 heartbeat 결과 얻음
  T4: task 정리
  note right
    DONE task 정리
    TIMEOUT 계산해서 TIMEOUT된 task 정리
    Src 또는 Dest의 heartbeat 답을 구하지 못한 task 정리
  end note
  T5 : 배포에 사용 가능한\nsource 서버가 있는 지 체크
  T6 : 배포에 사용 가능한\ndest 서버가 있는 지 체크
  T7 : 모든 dest 서버의 파일 목록 수집
  T8 : grade info, hitcount history로 만든\n파일 meta 목록에 급 hits 반영
  T9 : 파일 meta 목록을\n급 hits 높은 순으로 정렬\n등급값 낮은 순으로 정렬하여\n배포 대상 파일 목록 만들기
  T10 : 배포 대상 파일 목록에 대해서\n배포 task 만들기
  T11: dest 서버에 이미 있는 파일이면 제외
  T12: source path에 없는 파일이면 제외 (SAN에 는 파일이면 제외)
  T13: 특정 prefix로 시작하는 파일이면 제외 (광고 파일 제외)
  T14: 배포에 사용 중인 파일이면 제외 (광고 파일 제외)
  T15 : src 서버 선택
  T16 : dest 서버 선택
  note right
  dest 서버는 같은 서버가
  여러 번 선택될 수 있음
  end note
  T17 : 배포 task 생성

  [*] -> T3
  T3 --> T4
  T4 --> T5
  T5 --> [*] : 사용 가능한 source 서버가\n없는 경우
  T5 --> T6
  T6 --> [*] : 사용 가능한 dest 서버가\n없는 경우
  T6 --> T7
  T7 --> T8
  T8 --> T9
  T9 --> T10
  T10 -> T11
  T11 --> T12
  T12 --> T13
  T13 --> T14
  T14 --> T15
  T15 --> [*] : 사용 가능한 source 서버가\n없는 경우
  T15 --> T16
  T16 --> T17
  T17 --> T10 : 배포할 파일이 남은 경우
  T17 --> [*] : 더 이상 배포할 피일이 없는 경우
}

state RemoverProcess {
  RM3 : server별로 존재하는 파일 meta 목록 구함

  RM5 : disk 사용량 limit를 넘은 server 조사

  RM3 --> RM4
  RM4 -> RM5
  RM5 --> RM6
  RM6 --> [*]

  state RM4 {
    RM4 : 여러 server에 존재하는 파일에 대한 삭제 요청
    RM40 : 여러 server에 존재하는 파일 meta 목록 update
    note right
      server별로 존재하는 파일 meta 목록을 가지고
      cross check하여 update
    end note
    RM41 : 여러 server에 존재하는 파일이\n하나의 서버에만 존재할 때까지 삭제 요청 수행
    RM42 : 특정 prefix로 시작하는 파일일 때는 제외 (광고 파일 제외)
    RM43 : source path 에 없는 파일일 때는 제외 (SAN에 없는 파일 제외)
    RM43 : 삭제 요청

    [*] -> RM40
    RM40 --> RM41
    RM41 --> RM42
    RM42 --> RM43
    RM43 --> RM44
    RM44 --> RM41 : 처리할 파일이 남은 경우
    RM44 --> [*] : 처리할 파일이 없는 경우
  }

  state RM6 {
    RM6 : disk 사용량 limit를 넘은 server에 대해서 disk 삭제 요청

    RM60 : server 별로 지워야 할 파일 목록 만들기
    RM61 : server 파일 목록을 등급이 큰 순서로 정렬
    RM62 : disk 여유 사용량이 확보될 때까지\n지워야할 파일 목록 만들기
    RM63: 특정 prefix로 시작하는 파일일 때는 제외 (광고 파일 제외)
    RM64 : source path 에 없는 파일일 때는 제외 (SAN에 없는 파일 제외)
    RM65 : 급 hit 상승 파일일 때는 제외
    RM66 : 지워야 할 파일에 대해서\n 서버에 삭제 요청

    [*] -> RM60
    RM60 --> RM61
    RM61 --> RM62
    RM62 --> RM63
    RM63 --> RM64
    RM64 --> RM65
    RM65 --> RM66 : disk 여유 용량 확보 될 만큼\n지울 파일을 확보했거나,\n서버 파일이 없는 경우
    RM65 --> RM62 : disk 여유 용량\n확보 안되고,\n서버 파일이 남은 경우
    RM66 --> RM60 : 처리할 server가 남은 경우
    RM66 --> [*] : 처리할 server가 없는 경우
  }
}
@enduml

@startuml
title cfm_cfw_DFS_Sequence_v1.0.0.qr2

box "ADC/LSM"
participant cfm
end box

box "VOD"
participant cfw as "cfw"
end box

box "VOD(source)"
participant cfw2 as "cfw"
participant dfs as "DFS"
end box

group heartbeat-thread
loop endless
autonumber 1 "<b>[0]"
cfm->cfw: heartbeat 확인
    note right
      서버별 heartbeat 성공 여부 정보 생성
    end note
cfm->cfw2: heartbeat 확인
end
end

group file-remover-thread
loop endless
autonumber 1 "<b>[0]"
cfm->cfm: file meta 정보 생성
    note right
        - .hitcount.history 에서 file size 추출
        - .grade.info 에서 file 순위 추출
    end note
cfm->cfw: GET /files
    note right
        서버별 file list 확인
    end note
cfm->cfw2: GET /files
cfm->cfm: file meta 에서 여러 서버에 존재하는(배포된) file list 추출
cfm->cfw: DELETE /files/c.mpg
    note right
        여러 서버에 존재하는 file 삭제
    end note

cfm->cfw: GET /df
    note right
        디스크 사용량 체크
    end note
cfm->cfw2: GET /df
cfm->cfw: DELETE /files/a.mpg
    note right
        디스크 사용량이 정해진 한계 사용량을 넘었을 때
        file 순위가 낮은 순으로 file 삭제
    end note
cfm->cfw2: DELETE /files/b.mpg
end
end

group task-manager-thread
loop endless
autonumber 1 "<b>[0]"
cfm->cfm: file meta 정보 생성
    note right
        - .hitcount.history 에서 file size 추출
        - .grade.info 에서 file 순위 추출
    end note
cfm->cfm: check task queue
    note right
        배포 schedule 조회
    end note
cfm->cfm: clean task queue
    note right
        schedule 삭제
        - 완료되었거나 (status = done)
        - timeout ( mtime + 30분 =< current time )
        - heartbeat 성공 하지 않았거나
    end note
cfm->cfw: GET /files
    note right
        서버별 file list 확인
    end note
cfm->cfw2: GET /files
cfm->cfm: create tasks
    note right
        배포 schedule 생성
        - 순위가 높은 순서부터 조건 확인
        - task queue 에 없고
        - VOD 서버에 없고
        - SAN 에 존재하는 파일인 경우 선택
        - 모든 src 가 선택될 때까지 생성
    end note
end
end

group cfw
loop endless
autonumber 1 "<b>[0]"
cfw->cfw: 디스크 사용량 체크
cfw->cfm: GET /tasks
    note left
        디스크가 충분한 경우
        배포 schedule 조회
        자신의 배포 schedule 선택
    end note
cfw->cfm: PATCH /tasks/${task_id}
    note left
        file 다운로드 시작 전 schedule 상태 변경
        - status:ready -> status:working
    end note
cfw->dfs: file 다운로드 요청
cfw->cfm: PATCH /tasks/${task_id}
    note left
        file 다운로드 완료 후 schedule 상태 변경
        - status:working -> status:done
    end note
end
end
@enduml

@startuml
title cfm_v1.0.0.qr2_tasker_State
hide empty description

[*] -> S0
S0 : 무한 반복
S1 : grade info, hitcount history 파일로부터\n파일 등급, 크기, 서버 위치 정보가 들어있는 파일 meta 목록 생성\n여러 server에 존재하는 파일 meta 목록 생성
note right
	파일 등급 : grade info 파일에서 구함
	파일 크기 : hitcount history 파일에서 구함
	서버 위치 : 서버가 존재하는 서버 ip 목록,
                     hitcount history 파일에서 구함

	서버 위치 정보를 이용하여 여러 server에
  존재하는 파일 목록 생성
end note
S2 : 급hit 상승 파일 목록 구함
S3 : source, dest 서버의 heartbeat 결과 얻음
S4: task 정리
note right
	DONE task 정리
	TIMEOUT 계산해서 TIMEOUT된 task 정리
	Src 또는 Dest의 heartbeat 답을 구하지 못한 task 정리
end note
S5 : 배포에 사용 가능한\nsource 서버가 있는 지 체크
S6 : 배포에 사용 가능한\ndest 서버가 있는 지 체크
S7 : 모든 dest 서버의 파일 목록 수집
S8 : grade info, hitcount history로 만든\n파일 meta 목록에 급 hits 반영
S9 : 파일 meta 목록을\n급 hits 높은 순으로 정렬\n등급값 낮은 순으로 정렬하여\n배포 대상 파일 목록 만들기
S10 : 배포 대상 파일 목록에 대해서\n배포 task 만들기
S11: dest 서버에 이미 있는 파일이면 제외
S12: source path에 없는 파일이면 제외 (SAN에 는 파일이면 제외)
S13: 특정 prefix로 시작하는 파일이면 제외 (광고 파일 제외)
S14: 배포에 사용 중인 파일이면 제외 (광고 파일 제외)
S15 : src 서버 선택
S16 : dest 서버 선택
note right
 dest 서버는 같은 서버가
 여러 번 선택될 수 있음
end note
S17 : 배포 task 생성
S100: sleep N초(default:10초)

S0 -> S1
S1 -> S100 : 파일 parsing error 발생
S1 --> S2 : parsing 성공
S2 --> S3
S3 --> S4
S4 --> S5
S5 --> S100 : 사용 가능한 source 서버가\n없는 경우
S5 --> S6
S6 --> S100 : 사용 가능한 dest 서버가\n없는 경우
S6 --> S7
S7 --> S8
S8 --> S9
S9 --> S10
S10 -> S11
S11 --> S12
S12 --> S13
S13 --> S14
S14 --> S15
S15 --> S100 : 사용 가능한 source 서버가\n없는 경우
S15 --> S16
S16 --> S17
S17 --> S10 : 배포할 파일이 남은 경우
S17 --> S100 : 더 이상 배포할 피일이 없는 경우
S100 -> S0
@enduml

@startuml
title cfm_v1.0.0.qr2_remover_State
hide empty description

[*]--> S0
S0 : 무한 반복
S0 -> S1
S1 : grade info, hitcount history 파일로부터\n파일 등급, 크기, 서버 위치 정보가 들어있는 파일 meta 목록 생성\n여러 server에 존재하는 파일 meta 목록 생성
note right
	파일 등급 : grade info 파일에서 구함
	파일 크기 : hitcount history 파일에서 구함
	서버 위치 : 서버가 존재하는 서버 ip 목록, hitcount history 파일에서 구함

	서버 위치 정보를 이용하여 여러 server에 존재하는 파일 목록 생성
end note

S1 --> S7 : 파일 parsing error 발생
S7 : sleep N초(default:5)
S7 --> S0
S1 --> S2 : parsing 성공
S2 : 급hit 상승 파일 목록 구함
S2 --> S3
S3 : server별로 존재하는 파일 meta 목록 구함
S3 --> S4
S4 : 여러 server에 존재하는 파일에 대한 삭제 요청
S4 -> S5
S5 : disk 사용량 limit를 넘은 server 조사
S5 --> S6
S6 : disk 사용량 limit를 넘은 server에 대해서 disk 삭제 요청
S6 --> S7
@enduml

@startuml
title cfm_v1.0.0.qr2_remover_delete_duplicated_files_State
hide empty description
state S4 {
S4 : 여러 server에 존재하는 파일에 대한 삭제 요청

S40 : 여러 server에 존재하는 파일 meta 목록 update
note right
	server별로 존재하는 파일 meta 목록을 가지고
	cross check하여 update
end note
S41 : 여러 server에 존재하는 파일이\n하나의 서버에만 존재할 때까지 삭제 요청 수행
S42 : 특정 prefix로 시작하는 파일일 때는 제외 (광고 파일 제외)
S43 : source path 에 없는 파일일 때는 제외 (SAN에 없는 파일 제외)
S43 : 삭제 요청

[*] -> S40
S40 --> S41
S41 --> S42
S42 --> S43
S43 --> S44
S44 --> S41 : 처리할 파일이 남은 경우
S44 --> [*] : 처리할 파일이 없는 경우
}
@enduml

@startuml
title cfm_v1.0.0.qr2_remover_delete_files_for_disk_free_State
hide empty description
state S6 {
S6 : disk 사용량 limit를 넘은 server에 대해서 disk 삭제 요청

S60 : server 별로 지워야 할 파일 목록 만들기
S61 : server 파일 목록을 등급이 큰 순서로 정렬
S62 : disk 여유 사용량이 확보될 때까지\n지워야할 파일 목록 만들기
S63: 특정 prefix로 시작하는 파일일 때는 제외 (광고 파일 제외)
S64 : source path 에 없는 파일일 때는 제외 (SAN에 없는 파일 제외)
S65 : 급 hit 상승 파일일 때는 제외
S66 : 지워야 할 파일에 대해서\n 서버에 삭제 요청

[*] -> S60
S60 --> S61
S61 --> S62
S62 --> S63
S63 --> S64
S64 --> S65
S65 --> S66 : disk 여유 용량 확보 될 만큼\n지울 파일을 확보했거나,\n서버 파일이 없는 경우
S65 --> S62 : disk 여유 용량\n확보 안되고,\n서버 파일이 남은 경우
S66 --> S60 : 처리할 server가 남은 경우
S66 --> [*] : 처리할 server가 없는 경우
}
@enduml

@startuml
title cfm_cfw_DFS_Sequence_v1.0.0.qr1

box "ADC/LSM"
participant cfm
end box

box "VOD"
participant cw as "cfw"
end box

box "VOD(source)"
participant cw2 as "cfw"
participant dfs as "DFS"
end box

group file-remover-thread
loop endless
autonumber 1 "<b>[0]"
cfm->cfm: file meta 정보 생성
    note right
        - .hitcount.history 에서 file size 추출
        - .grade.info 에서 file 순위 추출
    end note

cfm->cw: GET /df
    note right
        디스크 사용량 체크
    end note
cfm->cw2: GET /df
cfm->cw: GET /files
    note right
        서버별 file list 확인
    end note
cfm->cw2: GET /files
cfm->cw: DELETE /files/a.mpg
    note right
        디스크 사용량이 정해진 한계 사용량을 넘었을 때
        file 순위가 낮은 순으로 file 삭제
    end note
cfm->cw2: DELETE /files/b.mpg
end
end

group task-manager-thread
loop endless
autonumber 1 "<b>[0]"
cfm->cfm: file meta 정보 생성
    note right
        - .hitcount.history 에서 file size 추출
        - .grade.info 에서 file 순위 추출
    end note
cfm->cfm: check task queue
    note right
        배포 schedule 조회
    end note
cfm->cfm: clean task queue
    note right
        schedule 삭제
        - 완료되었거나 (status = done)
        - timeout ( mtime + 30분 =< current time )
    end note
cfm->cw: GET /files
    note right
        서버별 file list 확인
    end note
cfm->cw2: GET /files
cfm->cfm: create tasks
    note right
        배포 schedule 생성
        - 순위가 높은 순서부터 조건 확인
        - task queue 에 없고
        - VOD 서버에 없고
        - SAN 에 존재하는 파일인 경우 선택
        - 모든 src 가 선택될 때까지 생성
    end note
end
end

group cfw
loop endless
autonumber 1 "<b>[0]"
cw->cw: 디스크 사용량 체크
cw->cfm: GET /tasks
    note left
        디스크가 충분한 경우
        배포 schedule 조회
        자신의 배포 schedule 선택
    end note
cw->cfm: PATCH /tasks/${task_id}
    note left
        file 다운로드 시작 전 schedule 상태 변경
        - status:ready -> status:working
    end note
cw->dfs: file 다운로드 요청
cw->cfm: PATCH /tasks/${task_id}
    note left
        file 다운로드 완료 후 schedule 상태 변경
        - status:working -> status:done
    end note
end
end
@enduml

@startuml
title cfm_v1.0.0.qr1_tasker_State
hide empty description

[*]-> S0
S0 : 무한 반복
S0 --> S1
S1: task 정리
note right
  DONE, TIMEOUT task 정리
end note
S1 --> S2
S2 : task 에서 사용 중(배포 중)인\nsource 서버가 있는 지 체크
S2 --> S3 : 사용 가능한 source 서버가\n없는 경우
S3 : sleep 5초
S3 -> S0

S2 --> S4
S4 : grade 정보, hitcount 정보를 이용하여\n파일 목록 생성
note right
 파일 등급 : grade info 파일에서 구함
 파일 크기 : hitcount 정보에서는 구함
end note

S4 --> S3 : error 가 발생하는 경우

S4 --> S5 : 정상 처리된 경우
S5 : 광고 파일은 배포 파일 목록에서 제외
S5 --> S6
S6 : 파일 목록을 높은 등급 순서로 정렬

S6 --> S7
S7 : dest 서버의 모든 파일 목록 수집

S7 --> S8
S8 : 급 hit 상승 파일 목록 생성
note left
LB eventlog 이용하여
N분 동안 X번 이상 특정 IP 에서
서비스된 파일 목록을 구함
end note

S8 --> S9
S9 : 급 hit 상승 파일 목록을\nhitcount 큰 순서로 정렬

S9 --> S10
S10 : 급 hit 상승 파일 목록에, \ngrade 정보, hitcount 정보로 만든 파일 목록을  함침

S10 --> S11
S11: 합친 배포 파일 목록으로 배포 task 만들기
note right
 사용 중이 아닌 source 서버 갯수만큼
 배포 task를 만듬
end note

S11 --> S12
S12 : 다음 파일 선택 (순서대로 선택)

S12 --> S13
S13 : 이미 배포 중인 파일이면 제외

S13 --> S14
S14 : dest 서버에 있는 파일이면 제외
S14 --> S15
S15 : source path에 없는 파일이면 제외 (SAN에 없는 파일이면 제외)
S15 --> S16
S16 : 사용 가능한 source가 있는 지 검사

S16 --> S17
S17 : source 서버 선택

S17 --> S18
S18: dest 서버 선택 (ring 구조체에 저장되어있음)
note right
 dest 서버는 같은 서버가
 여러 번 선택될 수 있음
end note

S18 --> S19
S19: 배포 task 생성

S16 --> S20: 사용 가능한 source 서버가\n없는 경우
S20 : sleep 60초
S20 --> S0

S19 --> S20 : 더 이상 배포할 피일이 없는 경우
S19 --> S11 : 배포할 파일이 남은 경우
@enduml

@startuml
title cfm_v1.0.0.qr1_remover_State
hide empty description

[*]--> S0
S0 : 무한 반복\ngrade info, hitcount history 파일 parsing 상태 초기화
S0 --> S1
S1 : 모든 server의 disk 사용량 정보 구함\nerror난 경우, disk 크기, 사용량은 초기값으로 구해짐
S1 --> S2
S2 : 모든 server의 disk 사용량 정보
S2 --> S5 : 더 이상 처리할 정보가 없는 경우
S2 --> S3 : 처리할 disk 사용량 정보가 있는 경우
S3 : disk 사용량 limit 검사
S3 --> S4 : limit 넘은 경우
S3 --> S2 : limit 넘지 않은 경우\n(disk 사용량을 구하지 못한 경우도 포함됨)
S4 : grade info, hitcount history 파일로부터 파일 등급, 크기 정보가 들어있는 목록 생성,\n이미 파일 parsing 한 상태이면 다시 parsing 하지 않음
S4 --> S5 : 파일 parsing error 발생
S5 : sleep 3초
S5 --> S0
S4 --> S6 : parsing 성공
S6 : server 정보 구하기\nserver 의 파일 목록 구함
S6 --> S5 : error 발생
S6 --> S7 : 성공
S7 : 광고 파일 제외
S7 --> S8
S8 : 등급, 크기 정보에서 파일 등급 구함
S8 --> S9
S9 : 등급, 크기 정보에서 파일 크기 구함
S9 --> S10
S10 : 낮은 등급 순으로 정렬
S10 --> S11
S11 : 파일 크기 정보없는 파일 제외
S11 --> S12
S12 : Source path에 없는 파일 제외
S12 --> S13
S13 : 남은 파일 목록을 가지고 삭제 파일 대상 목록 만들기\ndisk 사용량 limit 넘은 크기 만큼의 파일 목록 만들기
S13 --> S14
S14 : 서버에 삭제 대상 목록에 대해서 삭제 요청
S14--> S2
@enduml



@startuml
title legacy_CenterFileManager_CenterFileWorker_DFS_vodSubAgent_Sequence

box "ADC/LSM"
participant cm as "CenterFileManager"
participant dfs as "DFS"
end box

box "VOD"
participant cw1 as "CenterFileWorker-1"
participant dfs1 as "DFS-1"
participant va1 as "vodSubAgent-1"
end box

box "VOD(Source)"
participant cw2 as "CenterFileWorker-2"
participant dfs2 as "DFS-2"
participant va2 as "vodSubAgent-2"
end box

loop schedule file 발견할 때까지
cw1->cw1: scheule file polling
end

loop schedule file 발견할 때까지
cw2->cw2: scheule file polling
end

cm->cm: file meta 생성
cm->dfs1: file list 조회
cm->dfs2: file list 조회
cm->va2: vod service traffic 조회
cm->cm: 배포 schedule 생성
cm->cm: 삭제 schedule 생성
cm->dfs1: schedule 전송
cw1->cw1: schdule file 파싱
cw1->cw1: file 삭제
cw1->dfs2: file 다운로드 요청

loop 모든 schedule이 종료될 떄까지
cw1->dfs: file 다운로드 중 heartbeat file 전송
cm->cm: heartbeat file 확인
opt heartbeat file 이 없을 경우
    cm->cm: heartbeat file 이 없는 worker 의 schedule 종료 처리
end
cw1->cm: file 다운로드 완료 후 response file 전송
cm->cm: response file 확인
opt response file 이 있을 경우
    cm->cm: response file 이 있는 worker 의 schedule 종료 처리
end
cm->cm: 10초 sleep
end
@enduml
